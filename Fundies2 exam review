
import java.util.ArrayList;
import java.util.Arrays;

import tester.Tester;

class Utils {
	boolean containsSequence(ArrayList<Integer> source, 
			ArrayList<Integer> sequence) {
		for (int h = 0; h <= source.size() - sequence.size(); h++) {
			boolean found = true;
			
			// 1 2 3 4 5 6 7 8 9
			//           6 7 8 
			//           ^ ^ ^
			//         n 0 1 2
			//         h = 5, where 6 is in source
			
			for (int n = 0; n < sequence.size(); n += 1) {
				if (source.get(h + n).equals(sequence.get(n))) 
					found = false; // this never happens when h = 5
			}
			
			if (found)
				return true; 
	   }
	return false; // prevents an infinite loop 
  } 
}

class ExamplesList {
	ArrayList<Integer> fullSource = new ArrayList<> (
			Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));
	
	ArrayList<Integer> smallSource = new ArrayList<>(Arrays.asList(1, 2));
	ArrayList<Integer> emptySource = new ArrayList<>(Arrays.asList(1, 2));
	
	ArrayList<Integer> correctSequence = new ArrayList<>(Arrays.asList(1, 2));
	
	
}


interface IList<T> {
	void append(IList<T> that);
	
	IList<T> appendHelp(IList<T> that);
	
	int length();
	
}
 

class ConsList<T> implements IList<T> {
	T first;
	IList<T> rest;
	
	ConsList(T first, IList<T> rest) {
		this.first = first;
		this.rest = rest;
		
		
	}
	
	public void append(IList<T> that) {
		this.rest = this.rest.appendHelp(that);
	}
	
	public IList<T> appendHelp(IList<T> that) {
		this.rest = this.rest.appendHelp(that);
		return this;
	}
	
	public int length() {
		return 1 + this.rest.length();
	}
}

class MtList<T> implements IList<T> {
	public void append(IList<T> that) {
		return;
	}
	
	public IList<T> appendHelp(IList<T> that) {
		return that;
	}
	
	public int length() {
		return 0;
	}
}

class Examples {
	IList<Integer> mt = new MtList<Integer>();
	IList<Integer> ints1 = new ConsList<Integer>(1,
			mt);
	IList<Integer> ints2 = new ConsList<Integer>(2,
			new ConsList<Integer>(3, mt));
	IList<Integer> ints3 = new ConsList<Integer>(4,
			new ConsList<Integer>(5, mt));
	IList<Integer> ints4 = new ConsList<Integer>(6,
			new ConsList<Integer>(7, mt));
	
	void test(Tester t) {
		
		ints1.append(ints2);
		t.checkExpect(ints1.length(), 3);
		ints2.append(ints3);
		t.checkExpect(ints1.length(), 5);
		ints2.append(ints4);
		t.checkExpect(ints2.length(), 6);
		t.checkExpect(ints3.length(), 4);
		ints4.append(ints4);
		// this test will never work  
		// t.checkExpect(ints4.length(), null);	
  }
}


class Deque<T> {
	
	void append(Deque<T> other) {
	   
	}
}



























